.###  This whole script runs in template mode.
.#
.template 1
.gsl from "scripts/prepare_fsm.gsl"
.path = "generated/doc/$(class.module:Pascal,lower)"
.filepath = path + "/$(class.name:Pascal,lower).dot"
.output filepath
.
digraph $(class.name:c) {
    graph [fontname = "helvetica"];
    node [fontname = "helvetica"];
    edge [fontname = "helvetica"];
    rankdir = LR;
    size = 20;
    overlap = false;
    splines = true;
    // concentrate = true;
.-    label="$(class.name:)"
.for fsm
.  for state where (name = fsm.initial)
    { node [shape = circle, style=filled, fillcolor=black, label="", size=8]; initial_state; }
    node [shape = Mrecord];
    initial_state -> $(name) [arrowhead="open"];
.  endfor
.endfor
.for fsm
.  for state
.    for event
.
.      triggers = ""
.      for class.socket
.        for incoming
.          for event as ev where ((state.name = when) & (name = event.name))
.             triggers += incoming.name + " received<br></br>"
.          endfor
.        endfor
.        for outgoing
.          for event as ev where ((state.name = when) & (name = event.name))
.             triggers += outgoing.name + " sent<br></br>"
.          endfor
.        endfor
.        for state as st
.          for event as ev where ((state.name = when) & (name = event.name))
.            triggers += socket.name + " state " + st.name + "<br></br>"
.          endfor
.        endfor
.      endfor
.      if (name = "connect")
.        triggers += "start" + "<br></br>"
.      endif
.      if (name = "disconnect")
.        triggers += "stop" + "<br></br>"
.      endif
.
.- Heartbeat events
.      for class.heartbeat
.        for tick
.          for event as ev where ((state.name = when) & (name = event.name))
.            triggers += heartbeat.name + " tick<br></br>"
.          endfor
.        endfor
.        for timeout
.          for event as ev where ((state.name = when) & (name = event.name))
.            triggers += heartbeat.name + " timeout<br></br>"
.          endfor
.        endfor
.      endfor
.      if (triggers <> "")
.        triggers = "<font color=\"red\">$(triggers)</font>"
.      endif
.
.      label = ""
.      for action
.        label += name + "<br></br>"
.      endfor
.      if (label <> "")
.        label = "<font color=\"blue\">$(label)</font>"
.      endif
.
.      if (state.name = next)
.      invisname = state.name + name + next
       $(invisname:c) [shape = point;
                       label = "";
                       margin = 0;
                       width = 0;
                       height = 0;
                       penwidth = 0;
                       fixedsize = true];
       $(state.Name) -> $(invisname:c):n [arrowhead=none];
       $(invisname:c):s -> $(Next) [label = <$(Name)<br></br>$(Triggers)$(Label)>;
                                    labeltooltip = "Tooltip" ];
.      else
       $(state.Name) -> $(Next) [label = <$(Name)<br></br>$(Triggers)$(Label)>;
                                 labeltooltip = "Tooltip" ];
.      endif
.    endfor
.  endfor
.endfor
}
.close
.x = proc.new("dot -Tpng -O " + filepath, ".")
.x.run()
.-x = proc.new("dot -Tsvg -O " + filepath, ".")
.-x.run()
.endtemplate
